import React, { Component } from 'react';
import ReactTable from "react-table";
import "react-table/react-table.css";
import Api          from '../api/Api';
import {Button, Row, Col} from "reactstrap";
import Time from 'react-time';

   
export default class ReportsContainer extends Component {
  
  constructor(props) {
    super(props);
    this.state = {
      type: "Report",
      data: [],
      selectAll: false,
			defaultNoReportMessage: 'Report does not exist',
			disabledButton: true
    }
		this.downloadFile      = this.downloadFile.bind(this);
		this.downloadSelected  = this.downloadSelected.bind(this);
		this.deleteSelected    = this.deleteSelected.bind(this)
  }

  componentDidMount() {
    if(this.props.authToken !== '' )
      Api.list(this.props.authToken)
      .then((response) => {
        if (response.data !== undefined)
          this.setState({
            data: response.data.map((d) => {
              let _report = d.attributes;
              _report['selected'] = false;
              return _report;
            })
          });
      })
      .catch((e) => console.log(e));
  }

  
  selectRow(row){
    var _reports = this.state.data;
    var newReport = _reports.filter(report => {return report.id === row.original.id})[0];
    newReport['selected'] = true;
    _reports[row.index] = newReport;
    this.setState({
      data: _reports,
			disabledButton: this.disabledButton()
    });
  }

  deselectRow(row){
    var reports = this.state.data;
    var newReport = reports.filter(report => {return report.id === row.original.id})[0];
    newReport['selected'] = false;
    reports[row.index] = newReport;
    this.setState({
      data: reports,
			disabledButton: this.disabledButton()
    });
  }

  isSelected(row){
    if(row){
      let report = this.state.data.filter(report => {return report.id === row.original.id})[0];
      return(report && report['selected'])
    }
    else{
      return false;
    }
  }

  selectAll(){
    let isSelected = this.state.selectAll;
    var reports = this.state.data;
    reports.map(report => {return report['selected'] = !isSelected});
    this.setState({
      selectAll: !isSelected
    });
    this.setState({
      data: reports
    });
  }
	
	disabledButton() {
		return this.state.data.filter((report) => report['selected'] === true).length === 0
	}

	downloadSelected() {
		let rows = this.state.data.filter((report) => report['selected'] === true);
		rows.forEach(row => {
			this.downloadFile(row.id)
		})
	}
	
	
	downloadFile(row) {
    Api.downloadFile(row, this.props.authToken)
			.then(result => result.blob())
      .then(result => {
				let report = this.state.data.filter((report) => report.id === row)[0]
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        var blob = new Blob([result], {type: result.type });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = report.file_path_name;
        a.click();
        window.URL.revokeObjectURL(url);
        }
      )
	    .catch((e) => console.log(e));
	}
	
	deleteSelected() {
		let rows   = this.state.data.filter((report) => report['selected'] === true);
		let rowIds = rows.map((row) => row.id) 
		Api.deleteMultipleFiles(rowIds, this.props.authToken)
			.then(() => {
				let data = this.state.data
				let updatedData = data.filter((report) => rowIds.indexOf(report.id) === -1)
				this.setState({
					data: updatedData
				})
			})
	    .catch((e) => console.log(e));		
	}
	
	deleteFile(row) {
		let row_id = row
    Api.deleteFile(row, this.props.authToken)
			.then(() => {
				let data = this.state.data
				let updatedData = data.filter((report) => report.id !== row_id)
				this.setState({
					data: updatedData
				})
			})
	    .catch((e) => console.log(e));
	}
	

	
  render() {
		const data = this.state.data;
		
    return (
			<div>
			  <Row>
			    <Col md='6'>
			      
			    </Col>
			    <Col md='6' className='text-right'>
			      <Button color="primary" disabled={this.state.disabledButton} onClick={this.downloadSelected}>Download selected reports</Button>
						&nbsp;
						<Button color="primary" disabled={this.state.disabledButton} onClick={this.deleteSelected}>Delete selected reports</Button>            
			    </Col>
			    
			  </Row>
			  <br/>
        <ReactTable
          data={data}
          columns={[
			      {
			        Header: props => <input type = "checkbox" checked={this.state.selectAll} onClick={(e) => {this.selectAll()}}/>,
			        accessor: 'id',
			        width: 45,
			        sortable: false,
			        filterable: false,
			        style: {
			          textAlign: "center"
			        },
			        Cell: row => (
			          <input type="checkbox" value={row.value} onChange={(e) => {
			            if(this.isSelected(row)){
			              this.deselectRow(row)
			            }
			            else{
			              this.selectRow(row)
			            }
			          }}
			          checked = {this.isSelected(row)}
			          />
			          )
			      },
            {
              Header: "File Name",
              accessor: "file_name"
            },
            {
              Header: "description",
              id: "description",
              accessor: "description"
            },
            {
              Header: "Date",
              accessor: "expiry_date",
							Cell: row => (
								<Time value={row.value} format="YYYY/MM/DD HH:mm" />
							)
            },
            {
              Header: "Status",
              accessor: "status"
            },
            {
              Header: "Report",
              accessor: "id",
							Cell: row =>(
								<span>
								<a onClick={(e) => this.downloadFile(row.value)} href='#'>Download</a>
								|
								<a onClick={(e) => this.deleteFile(row.value)} href='#'>Delete</a>
								</span>
							)
            }
          ]}
          defaultPageSize={10}
          className="-striped -highlight"
        />
        <br />
      </div>      
    );
  }
}

